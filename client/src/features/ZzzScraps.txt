





							
-----------------------------------------------


FROM LitTextsContainer DROPDOWN
							<FormControl sx={{ minWidth: "250px", ml: 10, bgcolor: "#fffaf5" }} >
								<InputLabel id="arrange-by-label">Arrange By</InputLabel>
								<Select
									labelId="arrange-by-label"
									id="arrange-by"
									value={litTextsOrder}
									label="Arrange By"
									onChange={handleLitTextsOrder}
									// sx={{ p: 1 }}
								>
									<MenuItem value="authorAZ">
										Author 
										<span style={directionStyle}>
											(a-z)
										</span>
									</MenuItem>
									<MenuItem value="titleAZ">
										Title
										<span style={directionStyle}>
											(a-z)
										</span>
									</MenuItem>
									<MenuItem value="recentComment">
										Activity
										<span style={directionStyle}>
											(newest first)
										</span>
									</MenuItem>
									<MenuItem value="recentlyAdded">
										Added
										<span style={directionStyle}>
											(newest first)
										</span>
									</MenuItem>
								</Select>
							</FormControl>


-----------------------------------------------


FROM LitTextsContainer DIRECTION ICON

	const [orderReverse, setOrderReverse] = useState(false)
	const handleOrderReverse = () => {
		setOrderReverse(prev => !prev)
	}
							<Box sx={{ bgcolor: "#eae4e1", ml: 10, width: 276 }} >
							<FormControl  variant="standard" sx={{ minWidth: "200px", }} >
								<InputLabel id="arrange-by-label">Arrange By</InputLabel>
								<Select
									labelId="arrange-by-label"
									id="arrange-by"
									value={litTextsOrder}
									label="Arrange By"
									onChange={handleLitTextsOrder}
									sx={{ p: 1 }}
								>
									<MenuItem value="authorAZ" sx={{ alignContent: "center" }} >
										Author (a-z)
									</MenuItem>
									<MenuItem value="titleAZ">Title</MenuItem>
									<MenuItem value="recentlyAdded">Date Added</MenuItem>
									<MenuItem value="recentComment">Latest Comment</MenuItem>
								</Select>
							</FormControl>
							<OrderButtonContainer
								handleOrderReverse={handleOrderReverse} 
								orderReverse={orderReverse}										
							/>
							</Box>	


-----------------------------------------------


FROM LitTextsContainer TOGGLEBUTTONS
	import { Typography, Grid, ToggleButton, ToggleButtonGroup, Box, TextField, Button, Tooltip } from '@mui/material'

							{/* <ToggleButtonGroup
								value={litTextsOrder}
								exclusive
								onChange={handleLitTextsOrder}
								aria-label="Arrange Users"
								sx={{ bgcolor: "#fffaf5", }}
							>
								<ToggleButton 
									value="authorAZ"
									aria-label="Author A-Z"
								>
									Author A-Z
								</ToggleButton>
								<ToggleButton 
									value="titleAZ"
									aria-label="Title A-Z"
								>
									Title A-Z
								</ToggleButton>
								<ToggleButton 
									value="recentlyAdded"
									aria-label="Most recently added"
								>
									Recently Added
								</ToggleButton>
								<ToggleButton 
									value="recentComment"
									aria-label="Most recent comment"
								>
									Recent Activity
								</ToggleButton>
							</ToggleButtonGroup> */}


-----------------------------------------------


FROM LitTextNewForm WITH CONDITIONALS ADDSTORYORPOEMETC
export default function LitTextNewForm() {
	const [isHidden, setIsHidden] = useState(false)
	const [storyOrPoem, setStoryOrPoem] = useState("Poem")
	const [formData, setFormData] = useState({
		title: "",
		author: "",
		pubdate: "",
		content: "",
		prose: false
	})
	const [quillData, setQuillData] = useState("")
	const [addStoryOrPoem, setAddStoryOrPoem] = useState("Add a New Poem")
	const [previewClicked, setPreviewClicked] = useState(false)
	const [areYouSure, setAreYouSure] = useState(<span>Are you sure your submission is a <b>POEM?</b></span>)

	const errors = useSelector(state => state.litTexts.errors)
	const dispatch = useDispatch()

	const handlePreviewClick = () => {
		setPreviewClicked(!previewClicked)
	}

	const handleProseBoolean = (b) => {
		setFormData(formData => {return ({
			...formData,
			prose: b
		})})
	}

	const handleStoryOrPoemClick = (event, value) => {
		setStoryOrPoem(value)
		if (value === "Story") {
			handleProseBoolean(true)
			setAddStoryOrPoem(`Add a New Story or Other Prose Work`)
			setAreYouSure(<span>Are you sure your submission is a <b>STORY</b> or other prose work?</span>)
		} else if (value === "Poem") {
			handleProseBoolean(false)
			setAddStoryOrPoem(`Add a New ${value}`)
			setAreYouSure(<span>Are you sure your submission is a <b>POEM?</b></span>)
		} else {
			setAddStoryOrPoem(`Add a New Story or Poem`)
			setAreYouSure(<span>Is your submission a <b>POEM</b>? Or is it a <b>STORY</b> or other prose work?</span>)

		}
	}

	const handleFormChange = (e) => {
		setFormData((formData) => {
			return (
				{
					...formData,
					[e.target.name]: e.target.value,
				}
			)
		})
	}

	const handleQuillChange = (content) => {
		console.log("handleQuillCHANGE", content)
		setQuillData(content)
	}

	const parseQuillData = () => {
		let parsedData = parse(`${quillData}`)
		if (storyOrPoem === "Poem") {
			return (<div className="poetry">{parsedData}</div>)
		} else {
			return (<div>{parsedData}</div>)
		}
	}

	const handleSubmit = (e) => {
		e.preventDefault()
		let parsedData = parseQuillData()
		handleFormChange({ target: { name: "content", value: parsedData } })
		console.log("handleSubmit.formData:", formData)
		dispatch(postLitText(formData))
	}

	const qFormats = [
		'header', 'bold', 'italic', 'underline', 'strike', 'blockquote',
    'list', 'bullet', 'indent'
	]

	const qModules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline','strike', 'blockquote'],
      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],
      ['clean']
    ],
  }

	return (
		<Grid item xs={12}>
			<Paper 
				elevation={6} 
				sx={{ p:3, m: 3, backgroundColor: "#fffaf5" }}
			>
				<Typography 
					variant="h5" 
					sx={{ textAlign:"center", mb: 1 }} 
				>
					<b>{addStoryOrPoem}</b>
				</Typography>

				<Box textAlign="center">
					<ToggleButtonGroup
						value={storyOrPoem}
						exclusive
						onChange={handleStoryOrPoemClick}
						aria-label="Story or Poem"
						sx={{ bgcolor: "#fff3e6", my: 1 }}
					>
						<ToggleButton 
							value="Story"
							aria-label="Story"
						>
							It's Prose
						</ToggleButton>
						<ToggleButton 
							value="Poem"
							aria-label="Poem"
						>
							It's Poetry
						</ToggleButton>
					</ToggleButtonGroup>
				</Box>

				<form display="flex" onSubmit={handleSubmit} >
					<TextField
						onChange={handleFormChange}
						autoComplete="title"
						name="title"
						required
						
						id="title"
						label="Title"
						autoFocus
						sx={{ mx: "5%", my: 1, backgroundColor: "#fff", width: "90%" }}
					/>
					<TextField
						onChange={handleFormChange}
						autoComplete="author"
						name="author"
						required
						id="author"
						sx={{ mx: "5%", my: 1, backgroundColor: "#fff", width: "90%" }}
						label="Author"
					/>
					<TextField
						onChange={handleFormChange}
						autoComplete="pubdate"
						name="pubdate"
						required
						id="pubdate"
						label="Year"
						sx={{ mt: 1, mb: 2, mx: "5%", backgroundColor: "#fff", width: "90%" }}
					/>
					<ReactQuill 
						theme="snow"
						value={quillData}
						onChange={handleQuillChange}
						placeholder="Paste and edit the text of the story or poem here"
						style={{ 
							backgroundColor: "#fff", 
							width: "90%",
							marginRight: "5%",
							marginLeft: "5%"
						}}
						formats={qFormats}
						modules={qModules}
					/>

						<div style={{ width: "100%", display: "flex", justifyContent: "center", textAlign: "center"  }}>
						<Tooltip title="Check out the preview before you submit" arrow>
							<Button 
								onClick={handlePreviewClick}
								variant="contained"
								sx={{ mt: 2, p: 2 }}
							>
								Preview
							</Button>
						</Tooltip>
						</div>
						{errors?errors.map(e => <div key={e.id} style={{ color: "#660033", textAlign: "center" }} >{e}</div>):null}
            {previewClicked ? 
							<div>
								<br/>
								<Paper 
									elevation={9} 
									sx={{ p:3, m: 1, mx: "8%", backgroundColor: "#fefcf9" }}
								>
									<Grid container wrap="nowrap">
										<Grid item xs={12}>
									<Typography variant="h6" sx={{ textAlign:"center", textColor: "#616161", fontVariant: "small-caps", mb: 1 }}><em>preview</em></Typography>
									<Typography variant="h4" sx={{ textAlign:"center" }}><b>{formData.title}</b></Typography>
									<Typography variant="h6" sx={{ textAlign:"center" }}>{formData.author}</Typography>
									<Typography variant="subtitle1" sx={{ textAlign:"center" }}><em>{formData.pubdate}</em></Typography>
										<Grid container wrap="nowrap">
											<Grid item xs={12} justifyContent="center" sx={{ display: "flex", }}>
												<div style={{ position: "flex", }} >
													<Typography variant="body1" sx={{ pb:3, pr:3, pl:3, pt:2, }}>
														{parseQuillData()}
													</Typography>
													</div>
											</Grid>
										</Grid>
									</Grid>
									</Grid>
								</Paper>
								<br/>
								<div style={{ color: "#660033", textAlign: "center", width: "100%" }} >{areYouSure}</div>
								<br/>
								{quillData.length > 0 && (storyOrPoem === "Story" || storyOrPoem === "Poem") ?
									<div style={{ width: "100%", display: "flex", justifyContent: "center", }}>
										<Button
											type="submit"
											variant="contained"
											sx={{ mt: 1, mb: 2, p: 2 }}
										>
											Submit
										</Button>
									</div>
								:
									<div style={{ width: "100%", display: "flex", justifyContent: "center", }}>
											<Button
												disabled
												variant="contained"
												sx={{ mt: 2, mb: 2, p: 2 }}
											>
												Submit
											</Button>
									</div>
								}
							</div>
						:
							<div style={{ width: "100%", display: "flex", justifyContent: "center", }}>
									<Button
										disabled
										variant="contained"
										sx={{ mt: 2, mb: 2, p: 2 }}
									>
										Submit
									</Button>
							</div>
						}
				</form>
			</Paper>
		</Grid>
	)
}


-----------------------------------------------


FROM litTextsSlice 
export const postLitText = createAsyncThunk(
	"litTexts/postLitText",
	async (formData) => {
		const response = await fetch("/lit_texts", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(formData),
		})
		if(!response.ok) {
			return Promise.reject();
		}
		return await response.json();	
	}
)


-----------------------------------------------


FROM LitTextsContainer OLD TERNARY WITH SORRY ERROR 
				{status === "idle" ? 
					<div>
						<Box textAlign="center">
							<ToggleButtonGroup
								value={litTextsOrder}
								exclusive
								onChange={handleLitTextsOrder}
								aria-label="Arrange Users"
								sx={{ bgcolor: "#fffaf5", }}
							>
								<ToggleButton 
									value="authorAZ"
									aria-label="Author A-Z"
								>
									Author A-Z
								</ToggleButton>
								<ToggleButton 
									value="titleAZ"
									aria-label="Title A-Z"
								>
									Title A-Z
								</ToggleButton>
								<ToggleButton 
									value="recentlyAdded"
									aria-label="Most recently added"
								>
									Recently Added
								</ToggleButton>
								<ToggleButton 
									value="recentComment"
									aria-label="Most recent comment"
								>
									Recent Activity
								</ToggleButton>
							</ToggleButtonGroup>
							<br/>
							<TextField 
								id="search"
								label="Search"
								variant="filled"
								sx={{ m: 2, mt: 3, width: "50%" }}
								onChange={e => handleSearch(e)}
							/>
						</Box>
						{renderLitTexts()}
						{<LitTextNewForm litText={null} />}
					</div>
				: status === "loading" ?
					<div className="centered-in-window" >
							<h1>Loading...</h1>
					</div>
				: <div className="centered-in-window" >
							<h1>We're sorry. There's been an error</h1>
					</div>
				}


-----------------------------------------------


FROM LitTextNewForm OLD PARSE W <BR/>
	const parseQuillData = () => {
		let parseData = quillData
		if (storyOrPoem === "Poem") {
			parseData = quillData.replaceAll("</p><p>", "<br/>")
		}
		let returnData = parse(`${parseData}`)
		return (<div>{returnData}</div>)
	}


-----------------------------------------------


FROM LitTextNewForm UNNECESSARY HANDER FUNCTIONS FOR QUILL DATA
	const handleFormContent = (data) => {
		setFormData(formData => {return ({
			...formData,
			content: data
		})})
	}

	const handleFormConditional = () => {
		if (formData.prose) {
			handleFormContent(quillData)		
		}	else {
			let 
		}
	}

	const handleQuillSubmit = (content) => {
		console.log("handleQuillSUBMIT", content)
		let cfg = {} 
		let converter = new QuillDeltaToHtmlConverter(content, cfg)
		let contentHTML = converter.convert()
		let parsedContent = parse(`${contentHTML}`)
	}


-----------------------------------------------


FROM LitTextNewForm TEXTFIELD FOR HTML
					<TextField
						onChange={handleFormChange}
						autoComplete="content"
						name="content"
						required
						fullWidth
						id="content"
						label="Content HTML"
						sx={{ 
							mt: 2,
							mb: 1, 
							mx: "10%", 
							backgroundColor: "#fefcf9", 
							width: "80%",
							visibility: isHidden ? "hidden" : "visible" 
						}}
					/>

					
-----------------------------------------------


FROM LitTextNewForm OLD PROSE/POETRY CONDITIONAL
	const [errors, setErrors] = useState([])
	const [isHidden, setIsHidden] = useState(false)
	const [storyOrPoem, setStoryOrPoem] = useState("")
	const isProse = () => storyOrPoem === "Story" ? true : false
	const [formData, setFormData] = useState({
		title: "",
		author: "",
		pubdate: "",
		content: "",
		prose: isProse()
	})
	const [quillData, setQuillData] = useState("")
	const [addStoryOrPoem, setAddStoryOrPoem] = useState("Add a New Story or Poem")
	// const [pasteStoryOrPoem, setPasteStoryOrPoem] = useState('story or poem')
	
	const handleStoryOrPoemClick = (event, value) => {
		setStoryOrPoem(value)
		setAddStoryOrPoem(`Add a New ${value}`)
		// setPasteStoryOrPoem(`${value.toLowerCase()}`)
	}


-----------------------------------------------


FROM LitTextNewForm ADD OR EDIT
	let addOrEdit = "Add a New Story or Poem"
	if (litText) {
		if (litText.prose) {
			addOrEdit = "Edit Story"
		} else {
			addOrEdit = "Edit Poem"
		}
	}

	if (litText) setFormData(litText)


-----------------------------------------------


USESELECT FOR USER
  const userArr = useSelector((state) => state.user.entities)
  const user = userArr.length > 0 ? userArr[0] : null



-----------------------------------------------



FROM litTextsSlice
	extraReducers: {
		[fetchLitTexts.pending](state) {
			state.status = "loading"
		},
		[fetchLitTexts.fulfilled](state, action) {
			state.entities = action.payload
			state.status = "idle"
		}
	},


	export const fetchLitTexts = createAsyncThunk("litTexts/fetchLitTexts", () => {
	return fetch("/lit_texts")
    .then((r) => r.json())
    .then((data) => data.sort((a, b) => b.id - a.id))
})



-----------------------------------------------



FROM litTextsApi
	import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

	export const litTextsApi = createApi({
		reducerPath: 'litTextApi',
		baseQuery: fetchBaseQuery({ baseUrl: '/'}),
		endpoints: (builder) => ({
			getLitTexts: builder.query({
				query: () => 'lit_texts',
			}),
			getLitTextById: builder.query({
				query: (id) => `lit_texts/${id}`,
			}),
		}),
	})

	export const { useGetLitTextsQuery, useGetLitTextbyIdQuery } = litTextsApi



-----------------------------------------------



FROM CommentNewForm
	function handleCheck(e) {
		if (comTypes.includes(parseInt(e.target.value))) {
			setComTypes((prevState) => {
				let newArr = prevState.filter((c) => parseInt(c.id) !== parseInt(e.target.value))
				return [...newArr]
			})
			// let filteredComTypes = comTypes.filter((c) => parseInt(c.id) !== parseInt(e.target.value))
			// setComTypes([...filteredComTypes])
			// setFormData({
			// 	...formData,
			// 	com_type_ids: filteredComTypes,
			// })
		console.log("did include", comTypes)
		} else {
			// let addedComTypes = comTypes.push(parseInt(e.target.value))
			setComTypes((prevState) => [...prevState, parseInt(e.target.value)])
			// setFormData({
			// 	...formData,
			// 	com_type_ids: addedComTypes,
			// })
		console.log("did not include", comTypes)
		}
		// console.log("end", comTypes)
	}



-----------------------------------------------



FROM TimeAgoContainer.js 
	if (created_at === updated_at) {
		secondTerm = null
	} else if (isDeleted) {
		secondTerm = <em>, deleted: <TimeAgo time={updated_at} />
				</em> 
	} else {
		secondTerm = <em>, updated: <TimeAgo time={updated_at} />
				</em>
	}



-----------------------------------------------



FROM seeds.rb 
	7.times do
		parent_comment_id=Comment.ids.sample
		user_id=User.ids.sample
		lit_text_id=LitText.ids.sample
		content=Faker::Lorem.paragraph
		Comment.create(user_id: user_id, lit_text_id: lit_text_id, parent_comment_id: parent_comment_id, content: content, deleted:false)
	end



-----------------------------------------------



FROM ReplyShow
	export default function ReplyShow({ reply, user, allUsers }) {

		const replyUser = allUsers.find((u) => parseInt(u.id) === parseInt(reply.user_id))

		return(
			<div style={{ padding: 10 }} >
				<div style={{ borderStyle: "solid", borderWidth: 1, padding: 5 }} >
					<h4>{replyUser.username}</h4>
							
				</div>
			</div>
		)
	}



-----------------------------------------------



FROM CommentShow
	<p style={{ fontSize: 10 }} ><em>posted: {comment.created_at}</em></p>
	{comment.created_at === comment.updated_at ? null : <span style={{ fontSize: 10, paddingLeft: 20 }} ><em>updated: {comment.updated_at}</em></span>}

	*

	const filteredReplies = replies.filter((r) => parseInt(r.user_id) === parseInt(commentUser.id))
	


-----------------------------------------------



FROM UserShow
	let showBio = ""
	bio ? showBio = `${bio.slice(0, 30)}...` : showBio = ""



-----------------------------------------------



FROM LitTextListShow
	const rawContent = content ? content.slice(0, 100) : ""
	const showContent = rawContent.replace(/(<([^>]+)>)/gi, " ")



-----------------------------------------------



FROM LitTextShow
	// import { QuillDeltaToHtmlConverter } from 'quill-delta-to-html'

	// console.log(litText)
	// let QuillDeltaToHtmlConverter = require('quill-delta-to-html').QuillDeltaToHtmlConverter
	// let cfg = {}
	// let rawContent = [{"insert":"Sometimes the notes are ferocious,\nskirmishes against the author\nraging along the borders of every page\nin tiny black script.\nIf I could just get my hands on you,\nKierkegaard, or Conor Cruise O’Brien,\nthey seem to say,\nI would bolt the door and beat some logic into your head.\n\nOther comments are more offhand, dismissive –\n“Nonsense.” “Please!” “HA!!” –\nthat kind of thing.\nI remember once looking up from my reading,\nmy thumb as a bookmark,\ntrying to imagine what the person must look like\nwho wrote “Don’t be a ninny”\nalongside a paragraph in "},{"attributes":{"italic":true},"insert":"The Life of Emily Dickinson."},{"insert":"\n\nStudents are more modest\nneeding to leave only their splayed footprints\nalong the shore of the page.\nOne scrawls “Metaphor” next to a stanza of Eliot’s.\nAnother notes the presence of “Irony”\nfifty times outside the paragraphs of "},{"attributes":{"italic":true},"insert":"A Modest Proposal."},{"insert":"\n\nOr they are fans who cheer from the empty bleachers,\nhands cupped around their mouths.\n“Absolutely,” they shout\nto Duns Scotus and James Baldwin.\n“Yes.” “Bull’s-eye.” “My man!”\nCheck marks, asterisks, and exclamation points\nrain down along the sidelines.\n\nAnd if you have managed to graduate from college\nwithout ever having written “Man vs. Nature”\nin a margin, perhaps now\nis the time to take one step forward.\n\nWe have all seized the white perimeter as our own\nand reached for a pen if only to show\nwe did not just laze in an armchair turning pages;\nwe pressed a thought into the wayside,\nplanted an impression along the verge.\n\nEven Irish monks in their cold scriptoria\njotted along the borders of the Gospels\nbrief asides about the pains of copying,\na bird singing near their window,\nor the sunlight that illuminated their page–\nanonymous men catching a ride into the future\non a vessel more lasting than themselves.\n\nAnd you have not read Joshua Reynolds,\nthey say, until you have read him\nenwreathed with Blake’s furious scribbling.\n\nYet the one I think of most often,\nthe one that dangles from me like a locket,\nwas written in the copy of"},{"attributes":{"italic":true},"insert":" Catcher in the Rye"},{"insert":"\nI borrowed from the local library\none slow, hot summer.\nI was just beginning high school then,\nreading books on a davenport in my parents’ living room,\nand I cannot tell you\nhow vastly my loneliness was deepened,\nhow poignant and amplified the world before me seemed,\nwhen I found on one page\n\na few greasy looking smears\nand next to them, written in soft pencil–\nby a beautiful girl, I could tell,\nwhom I would never meet–\n“Pardon the egg salad stains, but I’m in love.”\n"}]
	// let converter = new QuillDeltaToHtmlConverter(rawContent, cfg)
	// console.log("converter", converter)
	// let contentHTML = converter.convert()
	// console.log("contentHTML", contentHTML)

	{/* <p>{rawContent}</p> */}


------------


FROM Signup

			{ hasAccount ? 
				<div style={{ padding: 15 }} >
				<Login onLogin={onLogin} />
				<div className="txt-centered-in-div" >or</div>
				<button 
				onClick={handleClick} 
				className="centered-in-div" 
				>Signup for a New Account</button>
				</div>
				:
				<div style={{ padding: 15 }} >
				<Signup onLogin={onLogin} />
				<div className="txt-centered-in-div" >or</div>
				<button onClick={handleClick} className="centered-in-div" >Login to Your Account</button>
				</div>
			}

